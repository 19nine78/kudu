@using System.Xml
@using System.Xml.Linq

@functions {
    int errors = 0, warnings = 0, slow = 0;
    
    string GetAnnotations(string type)
    {
        switch (type)
        {
            case "error":
                return "label-important";
            case "warning":
                return "label-warning";
            case "response":
                return "label-success";
            default:
                break;
        }

        return "label-info";
    }

    TimeSpan GetElapsed(XElement element)
    {
        string elapsedValue = element.Attribute("elapsed").Value;
        int elapsedMs;
        if (Int32.TryParse(elapsedValue, out elapsedMs)) {
            return TimeSpan.FromMilliseconds(elapsedMs);
        }
        return TimeSpan.Zero;
    }

}

@helper RenderElapsedSpeed(TimeSpan elapsed)
{
    if (elapsed.TotalMinutes > 3)
    {
        <i class="label label-warning">Very Slow</i>
    }
    else if (elapsed.TotalMinutes > 2)
    {
        <i class="label label-warning">Slow</i>
    }    
}

@helper RenderElapsedHeader(TimeSpan elapsed)
{    
    if (elapsed.TotalMilliseconds > 0)
    { 
        <text>, took @elapsed.TotalMilliseconds ms @if (elapsed.TotalMinutes > 1)
                                                    { <text>(@String.Format("{0:0.00}", elapsed.TotalMinutes) minutes)</text> } </text> 
    }
}

@helper RenderElement(XElement element)
{
    var typeAttr = element.Attribute("type");
    var elapsed = GetElapsed(element);
    var slowCss = elapsed.TotalMinutes > 2 ? "slow" : "";
    if(!String.IsNullOrEmpty(slowCss)) 
    {
        slow++;
    }

    if (typeAttr != null)
    {
        var cssCls = GetAnnotations(typeAttr.Value);
        <li class="step @typeAttr.Value">
            <div class="label @cssCls title @slowCss">
                @if (typeAttr.Value == "lock") { 
                    <i class="icon-white icon-lock"></i>
                }
                else {
                    <span class="more icon-white icon-chevron-down"></span>
                }
                @RenderElapsedSpeed(elapsed)
                @element.Attribute("title").Value - @element.Attribute("date").Value
                @RenderElapsedHeader(elapsed)
            </div>
            <div class="content">
        @switch (typeAttr.Value)
        {
            case "request":
                if (element.Attribute("git") != null)
                { 
                <span class="label label-success">git</span>
                }
                <span class="req-method">@element.Attribute("method").Value</span> @element.Attribute("url").Value
                foreach (var a in element.Attributes())
                {
                if (a.Name.LocalName.StartsWith("h_")) { 
                <div><strong>@a.Name.LocalName.Substring(2)</strong> : @a.Value</div>
                }
                }
                break;
            case "response":
                if (element.Attribute("statusCode") != null)
                { 
                <span class="statusCode">@element.Attribute("statusCode").Value</span>
                <span class="statusText">@element.Attribute("statusText").Value</span>
                foreach (var a in element.Attributes())
                {
                if (a.Name.LocalName.StartsWith("h_")) { 
                <div><strong>@a.Name.LocalName.Substring(2)</strong> : @a.Value</div>
                }
                }
                }
                break;
            case "process":
                <pre>@element.Attribute("path").Value @element.Attribute("arguments").Value</pre>
                break;
            case "error":
                errors++;
                if (element.Attribute("text") != null)
                { 
                <pre>@element.Attribute("text").Value</pre>
                }
                break;
            case "warning":
                warnings++;
                if (element.Attribute("text") != null)
                { 
                <pre>@element.Attribute("text").Value</pre>
                }
                break;
            case "processOutput":
                var ose = element.Attribute("outStream");
                var ese = element.Attribute("errorStream");
                var ece = element.Attribute("exitCode");
                if (ose != null && !String.IsNullOrEmpty(ose.Value))
                { 
                <div class="out-stream">output stream</div>
                <pre>@ose.Value</pre>
                }
                if (ese != null && !String.IsNullOrEmpty(ese.Value))
                { 
                <div class="err-stream">error stream</div>
                <pre>@ese.Value</pre>
                }
                if (ece != null) 
                {
                var cls = ece.Value == "0" ? "badge-success" : "badge-error";
                <span class="badge @cls">@ece.Value</span>
                }
                break;
            case "gitStream":
                <pre>@element.Attribute("output").Value</pre>
                break;
        }
        @RenderElements(element.Elements())
        </div>
        </li>        
    }
    else
    {
        <li class="step">
            <div class="label title @slowCss">
                @if (element.Elements().Any())
                { 
                <span class="more icon-white icon-chevron-down"></span>
                }
                @RenderElapsedSpeed(elapsed)
                @element.Attribute("title").Value - @element.Attribute("date").Value
                @RenderElapsedHeader(elapsed)
            </div>
            <div class="content">
            @RenderElements(element.Elements())
            </div>
        </li>        
    }
}

@helper RenderElements(IEnumerable<XElement> elements)
    {
    var filtered = elements.Where(e => e.Attribute("date") != null);
    var sorted = filtered.OrderBy(e => DateTime.ParseExact(e.Attribute("date").Value, "MM/dd H:mm:ss", System.Globalization.CultureInfo.CurrentCulture));
    foreach (var e in sorted)
    {
    <ul>
        @RenderElement(e)
    </ul>
    }
}


@if (Model != null)
{
    var result = RenderElements(Model.Root.Elements()).ToString();
    <h3>Analysis</h3>
    <p>
        <span class="all-errors badge badge-error">@errors</span> Errors <span class="all-warnings badge badge-warning">@warnings</span> Warnings <span class="all-slow badge badge-warning">@slow</span> Long Operations (> 2 minutes running time)
    </p>
    <div class="analysis">
        @Html.Raw(result)
    </div>
}

<script type="text/javascript">
    $(function () {
        $('.title').toggle(function () {
            var $this = $(this);
            var $icon = $this.find('.more');
            $this.parent().children('.content').hide();
            $icon.addClass('icon-chevron-up');
            $icon.removeClass('icon-chevron-down');
        },
        function () {
            var $this = $(this);
            var $icon = $this.find('.more');
            $this.parent().children('.content').show();
            $icon.removeClass('icon-chevron-up');
            $icon.addClass('icon-chevron-down');
        });

        $('.all-warnings').toggle(function () {
            if ($(this).text() == '0') {
                return;
            }

            var $step = $('.step');
            $step.show();
            $step.not('.warning').hide();
            $('.warning').parents('li.step').show();
        },
        function () {
            $('.step').show();
        });

        $('.all-errors').toggle(function () {
            if ($(this).text() == '0') {
                return;
            }
            var $step = $('.step');
            $step.show();
            $step.not('.error').hide();
            $('.error').parents('li.step').show();
        },
        function () {
            $('.step').show();
        });

        $('.all-slow').toggle(function () {
            if ($(this).text() == '0') {
                return;
            }
            var $step = $('.step');
            $step.show();
            $step.not('.slow').hide();
            $('.slow').parents('li.step').show();
            $('.slow').parents('li.step').show();
        },
        function () {
            $('.step').show();
        });

        $('.toggle').click(function () {
            $('.step').click();
        });
    });
</script>